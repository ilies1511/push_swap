5 3 10 7 9 8 6 2 4 1
void	find_cheapest(t_node **tail_a, t_node **tail_b)
{
	t_node	*current_b;
	int		cheapest;
	int		len_b;
	int		i;
	t_node	*cheapest_node;

	i = 0;
	len_b = count_node(tail_b);
	current_b = *tail_b;
	cheapest = INT_MAX;
	cheapest_node = current_b;
	while (i < len_b)
	{
			// printf("value a = %d; value b = %d; cost a = %d ; cost b = %d ; index a = %d ; index b = %d\n",current_b->target_x, current_b->x, current_b->cost_a, current_b->cost_b, current_b->target_index ,current_b->index);

		if ((absoluter(current_b->cost_a)
			+ absoluter(current_b->cost_b)) < cheapest)
		{
			cheapest = current_b->cost_a + current_b->cost_b;
			cheapest_node = current_b;
			// sleep(5);
		}
		current_b = current_b->next;
		i++;
	}
			// printf("cheapst cost a = %d ; cheapst cost b = %d \n", current_b->cost_a, current_b->cost_b);
			// exit(1);
	do_cheapest_moves(tail_a, tail_b, cheapest_node);
}
int get_cost(t_node *cheapest_node)
{
	if ((cheapest_node->cost_a >= 0 && cheapest_node->cost_b >= 0)
		|| (cheapest_node->cost_a < 0 && cheapest_node->cost_b < 0))
	{
		if (absoluter(cheapest_node->cost_a) > absoluter(cheapest_node->cost_b))
			return (absoluter(cheapest_node->cost_a));
		else
			return (absoluter(cheapest_node->cost_b));
	}
	else
	{
		return(absoluter(cheapest_node->cost_a) + absoluter(cheapest_node->cost_b));
	}
}

void	find_cheapest(t_node **tail_a, t_node **tail_b)
{
	t_node	*current_b;
	int		cheapest;
	int		len_b;
	int		i;
	t_node	*cheapest_node;

	i = 0;
	len_b = count_node(tail_b);
	current_b = *tail_b;
	cheapest = INT_MAX;
	cheapest_node = current_b;
	while (i < len_b)
	{
			// printf("value a = %d; value b = %d; cost a = %d ; cost b = %d ; index a = %d ; index b = %d\n",current_b->target_x, current_b->x, current_b->cost_a, current_b->cost_b, current_b->target_index ,current_b->index);

		if (get_cost(cheapest_node) < cheapest)
		{
			cheapest = current_b->cost_a + current_b->cost_b;
			cheapest_node = current_b;
			// sleep(5);
		}
		current_b = current_b->next;
		i++;
	}
			// printf("cheapst cost a = %d ; cheapst cost b = %d \n", current_b->cost_a, current_b->cost_b);
			// exit(1);
	do_cheapest_moves(tail_a, tail_b, cheapest_node);
}

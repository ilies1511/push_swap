
CFLAGS = cc -Wall -Wextra -Werror

SRCS = ft_bzero.c ft_memset.c

OBJS = $(SRCS:.c=.o)

NAME = libft.a

HEADER = libft.h

all: $(NAME) #jetyzt handelt es sich um Befehle, was durch ':' verdeutlicht wird. Davor haben wir nur aliase erstrellt.

$(NAME): $(OBJS)
	ar rcs $@ $(OBJS)

$(OBJS): %.o: %.c $(HEADER) #cc $(CFLAGS) -I libft.h -c $< -o $@: -I Option bedeutet, dass libft.h included wird.
	$(CFLAGS) -I $(HEADER) -c $< -o $@
#$(CFLAGS) -I $(HEADER) -c $< -o $@: first in $(OBJS): %.o: %.c $(HEADER), we replace *.o files to &.c files and check wether we have a header
#Then we excecute this $(CFLAGS) -I $(HEADER) -c $< -o $@ : "-c $< says to compile .c file into .o files"

clean:
	rm -f $(OBJS)

fclean: clean
	rm -f $(NAME)

re: fclean all

.PHONY: all clean fclean re

# CC: Compiler command (set to cc).
# CFLAGS: Compilation flags.
# SRCDIR: Source directory.
# INCDIR: Header directory.
# SRCS: List of source files.
# OBJS: List of object files.
# LIBNAME: Name of the library.
# all: Default target (equivalent to make libft.a).
# $(LIBNAME): Rule to create the library.
# %.o: %.c: Rule for compiling individual source files.
# clean: Rule to remove object files.
# fclean: Rule to remove library and object files.
# re: Rule to rebuild everything.
# .PHONY: Marks targets as not representing files. So if you have a file name called "clean" or "all" doesn't get confusing
# Variables defined with := in GNU make are expanded when they are defined rather than when they are used.
# $< points to the first prerequisite.
# $@ points to the target
# $^ : all the prerequipments-dependencies
# ar -rcs: ar creates-modifies a group of files combined into an archive,s is like ranlib(), -c means be silent not print info, -r gives the archive file position
# % is pattern matching character ex. %.c %.o means if I have file1.c I should have same name file1.o
# ranlib command converts each Archive library to a random library. A random library is an archive library that contains a symbol table.
# to run makefile use "make -f name_of_file" or just make if name is the default Makefile or makefile
# := instead of = to avoid infinite recursion if ex. You type CC = $(CC)
#SRCS := $(wildcard *.c): $(wildcard pattern) is one of the functions for filenames. In this case, all files with the .c extension will be stored in a variable SRCS.
#BINS := $(SRCS:%.c=%): This is called as substitution reference. In this case, if SRCS has values 'foo.c bar.c', BINS will have 'foo bar'.
